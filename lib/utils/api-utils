/**
 * Fungsi utilitas untuk API calls
 */

import axios from "axios"

/**
 * Membuat timeout controller untuk request
 * @param {number} timeoutMs - Timeout dalam milidetik
 * @returns {Object} - { signal, clear }
 */
export function createTimeoutController(timeoutMs = 15000) {
  const controller = new AbortController()
  const timeoutId = setTimeout(() => controller.abort(), timeoutMs)

  return {
    signal: controller.signal,
    clear: () => clearTimeout(timeoutId),
  }
}

/**
 * Fungsi untuk mengambil data dengan caching
 * @param {string} url - URL endpoint API
 * @param {string} cacheKey - Key untuk menyimpan data di localStorage
 * @param {Object} options - Opsi tambahan
 * @returns {Promise<Object>} - Data respons API
 */
export async function fetchWithCache(url, cacheKey, options = {}) {
  const { headers = {}, signal = null, forceRefresh = false } = options

  // Coba ambil dari cache terlebih dahulu jika tidak memaksa refresh
  if (!forceRefresh && typeof window !== "undefined") {
    const cachedData = localStorage.getItem(cacheKey)
    const cacheTime = localStorage.getItem(`${cacheKey}_time`)

    if (cachedData && cacheTime) {
      // Cache valid selama 5 menit (300000 ms)
      const now = Date.now()
      const cacheAge = now - Number(cacheTime)

      if (cacheAge < 300000) {
        console.log(`Menggunakan data cache untuk ${url}`)
        return JSON.parse(cachedData)
      }
    }
  }

  // Tampilkan indikator loading
  if (typeof window !== "undefined" && window.NProgress) {
    window.NProgress.start()
  }

  try {
    console.log(`Mengambil data dari ${url}`)
    const startTime = Date.now()

    // Tambahkan timeout yang lebih lama untuk request
    const response = await axios.get(url, {
      headers,
      signal,
      timeout: 30000, // 30 detik timeout
    })

    const endTime = Date.now()
    console.log(`Fetch selesai dalam ${endTime - startTime}ms untuk ${url}`)

    // Simpan ke cache
    if (typeof window !== "undefined") {
      localStorage.setItem(cacheKey, JSON.stringify(response.data))
      localStorage.setItem(`${cacheKey}_time`, Date.now().toString())
    }

    // Sembunyikan indikator loading
    if (typeof window !== "undefined" && window.NProgress) {
      window.NProgress.done()
    }

    return response.data
  } catch (error) {
    console.error(`Error mengambil data dari ${url}:`, error.message)

    // Sembunyikan indikator loading
    if (typeof window !== "undefined" && window.NProgress) {
      window.NProgress.done()
    }

    // Jika error karena abort, lempar kembali
    if (error.name === "AbortError" || error.name === "CanceledError") {
      throw error
    }

    // Untuk error 401, hapus token dan lempar
    if (error.response?.status === 401) {
      if (typeof window !== "undefined") {
        sessionStorage.removeItem("adminToken")
      }
      throw error
    }

    // Untuk error lain, coba kembalikan dari cache sebagai fallback
    if (typeof window !== "undefined") {
      const cachedData = localStorage.getItem(cacheKey)
      if (cachedData) {
        console.warn("Menggunakan data cache sebagai fallback karena error API:", error.message)
        return JSON.parse(cachedData)
      }
    }

    throw error
  }
}

/**
 * Fungsi untuk menangani API calls dengan refresh token
 * @param {Function} apiCallFn - Fungsi yang membuat API call
 * @returns {Promise<any>} - Respons API
 */
export async function handleApiCall(apiCallFn) {
  try {
    const token = sessionStorage.getItem("adminToken")
    if (!token) {
      throw new Error("Token autentikasi tidak ditemukan")
    }

    return await apiCallFn(token)
  } catch (error) {
    if (error.response?.status === 401) {
      try {
        // Coba refresh token
        const refreshToken = sessionStorage.getItem("refreshToken")
        if (!refreshToken) {
          throw new Error("Refresh token tidak tersedia")
        }

        const refreshResponse = await axios.post(
          "/api/auth/refresh-token",
          { refreshToken },
          {
            headers: {
              "Content-Type": "application/json",
            },
          },
        )

        if (refreshResponse.data.token) {
          // Simpan token baru
          sessionStorage.setItem("adminToken", refreshResponse.data.token)
          if (refreshResponse.data.refreshToken) {
            sessionStorage.setItem("refreshToken", refreshResponse.data.refreshToken)
          }

          // Coba ulang request asli dengan token baru
          return await apiCallFn(refreshResponse.data.token)
        }
      } catch (refreshError) {
        console.error("Error refresh token:", refreshError)
        sessionStorage.removeItem("adminToken")
        sessionStorage.removeItem("refreshToken")
        throw new Error("Autentikasi gagal")
      }
    }

    throw error
  }
}
